<?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lezo.iscript.service.crawler.dao.ProxyDetectDao">
	<resultMap type="ProxyDetectDto" id="RM_ProxyDetectDto">
		<result column="ID" property="id" />
		<result column="IP" property="ip" />
		<result column="PORT" property="port" />
		<result column="DOMAIN" property="domain" />
		<result column="URL" property="url" />
		<result column="DETECTOR" property="detector" />
		<result column="CUR_COST" property="curCost" />
		<result column="MIN_COST" property="minCost" />
		<result column="MAX_COST" property="maxCost" />
		<result column="RETRY_TIMES" property="retryTimes" />
		<result column="STATUS" property="status" />
		<result column="CREATE_TIME" property="createTime" />
		<result column="UPDATE_TIME" property="updateTime" />
	</resultMap>
	<sql id="ProxyDetectDto-coloumn-list">
		IP ,PORT ,DOMAIN ,URL ,DETECTOR ,CUR_COST ,MIN_COST
		,MAX_COST ,RETRY_TIMES ,STATUS ,CREATE_TIME ,UPDATE_TIME
	</sql>
	<insert id="batchInsert" parameterType="ProxyDetectDto">
		INSERT INTO T_PROXY_DETECT(
		<include refid="ProxyDetectDto-coloumn-list" />
		)
		VALUES
		<foreach collection="list" item="item" index="index"
			separator=",">
			(#{item.ip},#{item.port},#{item.domain},#{item.url},#{item.detector},#{item.curCost},#{item.minCost},#{item.maxCost},#{item.retryTimes},#{item.status},#{item.createTime},#{item.updateTime})
		</foreach>
	</insert>
	<update id="updateOne" parameterType="ProxyDetectDto">
		UPDATE T_PROXY_DETECT SET
		DOMAIN =#{domain},URL =#{url},DETECTOR =#{detector},
		CUR_COST=#{curCost}, MIN_COST=#{minCost}, MAX_COST=#{maxCost},
		RETRY_TIMES=#{retryTimes}, STATUS=#{status}, UPDATE_TIME=#{updateTime}
		WHERE ID=#{id}
	</update>
	<update id="batchUpdateProxyStatus" parameterType="map">
		UPDATE T_PROXY_DETECT SET
		STATUS=#{status}
		WHERE 1=1 AND 
		<foreach collection="idList" item="id" open="ID IN("
				close=")" separator=",">
				#{id}
		</foreach>
	</update>
	<select id="getProxyDetectDtos" parameterType="map"
		resultMap="RM_ProxyDetectDto">
		SELECT * FROM T_PROXY_DETECT
		WHERE 1=1
		<if test="ipLongs!=null &amp;&amp; !ipLongs.isEmpty()">
			<foreach collection="ipLongs" item="ip" open="AND IP IN("
				close=")" separator=",">
				#{ip}
			</foreach>
		</if>
		<if test="portList!=null &amp;&amp; !portList.isEmpty()">
			<foreach collection="portList" item="port" open="AND PORT IN("
				close=")" separator=",">
				#{port}
			</foreach>
		</if>
		<if test="status!=null">
			AND STATUS=#{status}
		</if>
	</select>
	<select id="getProxyDetectDtosFromId" parameterType="map"
		resultMap="RM_ProxyDetectDto">
		SELECT * FROM T_PROXY_DETECT
		WHERE ID > #{fromId}
		<if test="status!=null">
			AND STATUS=#{status}
		</if>
		LIMIT #{limit}
	</select>
	<select id="getProxyDetectDtosFromStatus" parameterType="map"
		resultMap="RM_ProxyDetectDto">
		SELECT * FROM T_PROXY_DETECT
		WHERE STATUS=#{status}
		<if test="afterUpdateTime!=null">
			AND UPDATE_TIME&gt;#{afterUpdateTime}
		</if>
	</select>

	<select id="getProxyDetectDtoFromDomain" parameterType="map"
		resultMap="RM_ProxyDetectDto">
		SELECT * FROM T_PROXY_DETECT
		WHERE 1=1
		<if test="domainList!=null &amp;&amp; !domainList.isEmpty()">
			<foreach collection="domainList" item="domain" open="AND DOMAIN IN("
				close=")" separator=",">
				#{domain}
			</foreach>
		</if>
		<if test="status!=null">
			AND STATUS=#{status}
		</if>
	</select>
	<select id="getUnionProxyDetectDtoFromDomain" parameterType="map"
		resultMap="RM_ProxyDetectDto">
		<foreach collection="domainList" item="domain" separator="UNION">
			(SELECT * FROM T_PROXY_DETECT
			WHERE  DOMAIN=#{domain} AND STATUS=#{status} LIMIT #{limit})
		</foreach>
	</select>
</mapper>